package src/liblink/* include/* src/cmd/ld/* src/runtime/*h liblink1
package src/liblink/*5.c src/cmd/5l/*.h liblink1/arm
package src/liblink/*6.c src/cmd/6l/*.h liblink1/amd64
package src/liblink/*8.c src/cmd/8l/*.h liblink1/x86
package src/liblink/*9.c src/cmd/9l/*.h liblink1/ppc64

delete emallocz estrdup erealloc

delete find1 nuxiinit fnuxi8 fnuxi4 inuxi1 inuxi2 inuxi4 inuxi8 atolwhex

# we define our own Biobuf
delete Biobuf

# delete all the object file reading code. debug/goobj does that better.
delete ldobjfile readsym rdint rdstring rddata rdsym 

slice LSym.r LSym.nr LSym.maxr
slice Link.library Link.libraryp Link.nlibrary
slice Link.libdir Link.nlibdir Link.maxlibdir

bool yy_isalpha.return

func expandpkg(t0 string, pkg string) string {
	return strings.Replace(t0, `"".`, pkg+".", -1)
}

func Symgrow(ctxt *Link, s *LSym, lsiz int64) {
	var siz int
	siz = int(lsiz)
	if int64(siz) != lsiz {
		log.Fatal("Symgrow size %d too long", lsiz)
	}
	if len(s.P) >= siz {
		return
	}
	for cap(s.P) < siz {
		s.P = append(s.P[:cap(s.P)], 0)
	}
	s.P = s.P[:siz]
}

func savedata(ctxt *Link, s *LSym, p *Prog, pn string) {
	off := int32(p.From.Offset)
	siz := int32(ctxt.Arch.Datasize(p))
	if off < 0 || siz < 0 || off >= 1<<30 || siz >= 100 {
		mangle(pn)
	}
	if ctxt.Enforce_data_order != 0 && off < int32(len(s.P)) {
		ctxt.Diag("data out of order (already have %d)\n%P", len(s.P), p)
	}
	Symgrow(ctxt, s, int64(off+siz))
	
	switch int(p.To.Type_) {
	default:
		ctxt.Diag("bad data: %P", p)

	case ctxt.Arch.D_FCONST:
		switch siz {
		default:
			ctxt.Diag("unexpected %d-byte floating point constant", siz)
		
		case 4:
			flt := math.Float32bits(float32(p.To.U.Dval))
			ctxt.Arch.ByteOrder.PutUint32(s.P[off:], flt)
		
		case 8:
			flt := math.Float64bits(p.To.U.Dval)
			ctxt.Arch.ByteOrder.PutUint64(s.P[off:], flt)
		}

	case ctxt.Arch.D_SCONST:
		copy(s.P[off:off+siz], p.To.U.Sval)
	
	case ctxt.Arch.D_CONST, ctxt.Arch.D_ADDR:
		if p.To.Sym != nil || int(p.To.Type_) == ctxt.Arch.D_ADDR {
			r := Addrel(s)
			r.Off = off
			r.Siz = uint8(siz)
			r.Sym = p.To.Sym
			r.Type_ = R_ADDR
			r.Add = p.To.Offset
			break
		}
		o := p.To.Offset
		switch siz {
		default:
			ctxt.Diag("unexpected %d-byte integer constant", siz)
		case 1:
			s.P[off] = byte(o)
		case 2:
			ctxt.Arch.ByteOrder.PutUint16(s.P[off:], uint16(o))
		case 4:
			ctxt.Arch.ByteOrder.PutUint32(s.P[off:], uint32(o))
		case 8:
			ctxt.Arch.ByteOrder.PutUint64(s.P[off:], uint64(o))
		}
	}	
}

func Addrel(s *LSym) *Reloc {
	s.R = append(s.R, Reloc{})
	return &s.R[len(s.R)-1]
}

func setuintxx(ctxt *Link, s *LSym, off int64, v uint64, wid int64) int64 {
	if s.Type_ == 0 {
		s.Type_ = SDATA
	}
	s.Reachable = 1
	if s.Size < off+wid {
		s.Size = off + wid
		Symgrow(ctxt, s, s.Size)
	}

	switch wid {
	case 1:
		s.P[off] = uint8(v)
	case 2:
		ctxt.Arch.ByteOrder.PutUint16(s.P[off:], uint16(v))
	case 4:
		ctxt.Arch.ByteOrder.PutUint32(s.P[off:], uint32(v))
	case 8:
		ctxt.Arch.ByteOrder.PutUint64(s.P[off:], uint64(v))
	}
	
	return off+wid
}

diff {
type LinkArch struct {
	Name          string
	Thechar       int
	Endian        int32
+	ByteOrder	binary.ByteOrder
}

func addlib(ctxt *Link, src, obj, pathname string) {
	name := path.Clean(pathname)

	// runtime.a -> runtime
	short := strings.TrimSuffix(name, ".a")

	// already loaded?
	for i := range ctxt.Library {
		if ctxt.Library[i].Pkg == short {
			return
		}
	}

	var pname string
	// runtime -> runtime.a for search
	if (!(ctxt.Windows != 0) && name[0] == '/') || (ctxt.Windows != 0 && name[1] == ':') {
		pname = name
	} else {
		// try dot, -L "libdir", and then goroot.
		for _, dir := range ctxt.Libdir {
			pname = dir + "/" + name
			if _, err := os.Stat(pname); !os.IsNotExist(err) {
				break
			}
		}
	}
	pname = path.Clean(pname)

	// runtime.a -> runtime
	pname = strings.TrimSuffix(pname, ".a")

	if ctxt.Debugvlog > 1 && ctxt.Bso != nil {
		fmt.Fprintf(ctxt.Bso, "%5.2f addlib: %s %s pulls in %s\n", Cputime(), obj, src, pname)
	}
	addlibpath(ctxt, src, obj, pname, name)
}

func addlibpath(ctxt *Link, srcref, objref, file, pkg string) {
	for _, lib := range ctxt.Library {
		if lib.File == file {
			return
		}
	}
	
	if ctxt.Debugvlog > 1 && ctxt.Bso != nil {
		fmt.Fprintf(ctxt.Bso, "%5.2f addlibpath: srcref: %s objref: %s file: %s pkg: %s\n", Cputime(), srcref, objref, file, pkg)
	}

	ctxt.Library = append(ctxt.Library, Library{
		Objref: objref,
		Srcref: srcref,
		File: file,
		Pkg: pkg,
	})
}

diff {
func Copyp(ctxt *Link, q *Prog) *Prog {
}

func linklinefmt(ctxt *Link, lno0 int, showAll, showFullPath bool) string {
	var a [HISTSZ]struct {
		incl *Hist
		idel int32
		line *Hist
		ldel int32
	}
	lno := int32(lno0)
	lno1 := lno
	var d int32
	var i int
	var n int
	var h *Hist
	n = 0
	var fp string
	for h = ctxt.Hist; h != nil; h = h.Link {
		if h.Offset < 0 {
			continue
		}
		if lno < h.Line {
			break
		}
		if h.Name != "XXXXXXX" {
			if h.Offset > 0 {
				// #line directive
				if n > 0 && n < int(HISTSZ) {
					a[n-1].line = h
					a[n-1].ldel = h.Line - h.Offset + 1
				}
			} else {
				// beginning of file
				if n < int(HISTSZ) {
					a[n].incl = h
					a[n].idel = h.Line
					a[n].line = nil
				}
				n++
			}
			continue
		}
		n--
		if n > 0 && n < int(HISTSZ) {
			d = h.Line - a[n].incl.Line
			a[n-1].ldel += d
			a[n-1].idel += d
		}
	}
	if n > int(HISTSZ) {
		n = int(HISTSZ)
	}
	for i = n - 1; i >= 0; i-- {
		if i != n-1 {
			if !showAll {
				break
			}
			fp += " "
		}
		if ctxt.Debugline != 0 || showFullPath {
			fp += fmt.Sprintf("%s/", ctxt.Pathname)
		}
		if a[i].line != nil {
			fp += fmt.Sprintf("%s:%d[%s:%d]", a[i].line.Name, lno-a[i].ldel+1, a[i].incl.Name, lno-a[i].idel+1)
		} else {
			fp += fmt.Sprintf("%s:%d", a[i].incl.Name, lno-a[i].idel+1)
		}
		lno = a[i].incl.Line - 1 // now print out start of this file
	}
	if n == 0 {
		fp += fmt.Sprintf("<unknown line number %d %d %d %s>", lno1, ctxt.Hist.Offset, ctxt.Hist.Line, ctxt.Hist.Name)
	}
	return fp
}

func haspathprefix(s string, t string) bool {
	var i int
	var cs int
	var ct int
	if len(t) > len(s) {
		return false
	}
	for i = 0; i < len(t); i++ {
		cs = int(s[i])
		ct = int(t[i])
		if 'A' <= cs && cs <= 'Z' {
			cs += 'a' - 'A'
		}
		if 'A' <= ct && ct <= 'Z' {
			ct += 'a' - 'A'
		}
		if cs == '\\' {
			cs = '/'
		}
		if ct == '\\' {
			ct = '/'
		}
		if cs != ct {
			return false
		}
	}
	return i >= len(s) || s[i] == '/' || s[i] == '\\'
}

func linkgetline(ctxt *Link, line int32, f **LSym, l *int32) {
	var a [HISTSZ]struct {
		incl *Hist
		idel int32
		line *Hist
		ldel int32
	}
	var lno int32
	var d int32
	var dlno int32
	var n int
	var h *Hist
	var buf string
	var buf1 string
	var file string
	lno = int32(line)
	n = 0
	for h = ctxt.Hist; h != nil; h = h.Link {
		if h.Offset < 0 {
			continue
		}
		if lno < h.Line {
			break
		}
		if h.Name != "XXXXXXX" {
			if h.Offset > 0 {
				// #line directive
				if n > 0 && n < HISTSZ {
					a[n-1].line = h
					a[n-1].ldel = h.Line - h.Offset + 1
				}
			} else {
				// beginning of file
				if n < HISTSZ {
					a[n].incl = h
					a[n].idel = h.Line
					a[n].line = nil
				}
				n++
			}
			continue
		}
		n--
		if n > 0 && n < HISTSZ {
			d = h.Line - a[n].incl.Line
			a[n-1].ldel += d
			a[n-1].idel += d
		}
	}
	if n > HISTSZ {
		n = HISTSZ
	}
	if n <= 0 {
		*f = Linklookup(ctxt, "??", HistVersion)
		*l = 0
		return
	}
	n--
	if a[n].line != nil {
		file = a[n].line.Name
		dlno = a[n].ldel - 1
	} else {
		file = a[n].incl.Name
		dlno = a[n].idel - 1
	}
	if (ctxt.Windows == 0 && file[0] == '/') || (ctxt.Windows != 0 && file[1] == ':') || file[0] == '<' {
		buf = fmt.Sprintf("%s", file)
	} else {
		buf = fmt.Sprintf("%s/%s", ctxt.Pathname, file)
	}
	// Remove leading ctxt->trimpath, or else rewrite $GOROOT to $GOROOT_FINAL.
	if ctxt.Trimpath != "" && haspathprefix(buf, ctxt.Trimpath) {
		if len(buf) == len(ctxt.Trimpath) {
			buf = "??"
		} else {
			buf1 = fmt.Sprintf("%s", buf[len(ctxt.Trimpath)+1:])
			if buf1[0] == '\x00' {
				buf1 = "??"
			}
			buf = buf1
		}
	} else if ctxt.Goroot_final != "" && haspathprefix(buf, ctxt.Goroot) {
		buf1 = fmt.Sprintf("%s%s", ctxt.Goroot_final, buf[len(ctxt.Goroot):])
		buf = buf1
	}
	lno -= dlno
	*f = Linklookup(ctxt, buf, HistVersion)
	*l = lno
}

func linkprfile(ctxt *Link, line int) {
	l := int32(line)
	var i int
	var n int
	var a [HISTSZ]Hist
	var h *Hist
	var d int32
	n = 0
	for h = ctxt.Hist; h != nil; h = h.Link {
		if l < h.Line {
			break
		}
		if h.Name != "XXXXXXX" {
			if h.Offset == 0 {
				if n >= 0 && n < HISTSZ {
					a[n] = *h
				}
				n++
				continue
			}
			if n > 0 && n < HISTSZ {
				if a[n-1].Offset == 0 {
					a[n] = *h
					n++
				} else {
					a[n-1] = *h
				}
			}
			continue
		}
		n--
		if n >= 0 && n < HISTSZ {
			d = h.Line - a[n].Line
			for i = 0; i < n; i++ {
				a[i].Line += d
			}
		}
	}
	if n > HISTSZ {
		n = HISTSZ
	}
	for i = 0; i < n; i++ {
		fmt.Printf("%s:%d ", a[i].Name, int(l-a[i].Line+a[i].Offset+1))
	}
}

func wrdata(b *Biobuf, v []byte) {
	wrint(b, int64(len(v)))
	Bwrite(b, v)
}

func wrstring(b *Biobuf, s string) {
	wrint(b, int64(len(s)))
	b.w.WriteString(s)
}

func wrpath(ctxt *Link, b *Biobuf, p string) {
	wrstring(b, filepath.ToSlash(p))
}

func wrint(b *Biobuf, sval int64) {
	var uv uint64
	var v uint64
	var buf [10]uint8
	var p []uint8
	uv = (uint64(sval) << 1) ^ uint64(int64(sval>>63))
	p = buf[:]
	for v = uv; v >= 0x80; v >>= 7 {
		p[0] = uint8(v | 0x80)
		p = p[1:]
	}
	p[0] = uint8(v)
	p = p[1:]
	Bwrite(b, buf[:len(buf)-len(p)])
}

slice Pcln.funcdata Pcln.nfuncdata Pcln.mfuncdata
slice Pcln.pcdata Pcln.npcdata Pcln.mpcdata
slice Pcln.file Pcln.nfile Pcln.mfile
slice Pcln.funcdataoff Pcln.nfuncdata

diff {
-	wrdata(b, s.P, s.Np)
+	wrdata(b, s.P)
}

diff {
-		wrdata(b, pc.Pcsp.P, pc.Pcsp.N)
-		wrdata(b, pc.Pcfile.P, pc.Pcfile.N)
-		wrdata(b, pc.Pcline.P, pc.Pcline.N)
-		wrint(b, int64(pc.Npcdata))
-		for i = 0; i < pc.Npcdata; i++ {
-			wrdata(b, pc.Pcdata[i].P, pc.Pcdata[i].N)
-		}
-		wrint(b, int64(pc.Nfuncdata))
-		for i = 0; i < pc.Nfuncdata; i++ {
-			wrsym(b, pc.Funcdata[i])
-		}
-		for i = 0; i < pc.Nfuncdata; i++ {
-			wrint(b, pc.Funcdataoff[i])
-		}
-		wrint(b, int64(pc.Nfile))
-		for i = 0; i < pc.Nfile; i++ {
-			wrpathsym(ctxt, b, pc.File[i])
-		}
+		wrdata(b, pc.Pcsp.P)
+		wrdata(b, pc.Pcfile.P)
+		wrdata(b, pc.Pcline.P)
+		wrint(b, int64(len(pc.Pcdata)))
+		for _, data := range pc.Pcdata {
+			wrdata(b, data.P)
+		}
+		wrint(b, int64(len(pc.Funcdata)))
+		for _, sym := range pc.Funcdata {
+			wrsym(b, sym)
+		}
+		for _, off := range pc.Funcdataoff {
+			wrint(b, off)
+		}
+		wrint(b, int64(len(pc.File)))
+		for _, file := range pc.File {
+			wrpathsym(ctxt, b, file)
+		}
}

func addvarint(ctxt *Link, d *Pcdata, val uint32) {
	var v uint32
	for v = val; v >= 0x80; v >>= 7 {
		d.P = append(d.P, uint8(v|0x80))
	}
	d.P = append(d.P, uint8(v))
}

diff {
-	for i = 0; i < int32(pcln.Nfile); i++ {
-		if pcln.File[i] == f {
-			pcln.Lastfile = f
-			pcln.Lastindex = int(i)
-			return i
-		}
-	}
-
-	if pcln.Nfile >= pcln.Mfile {
-		pcln.Mfile = (pcln.Nfile + 1) * 2
-		pcln.File = erealloc(pcln.File, pcln.Mfile*sizeof(pcln.File[0])).([]*LSym)
-	}
-
-	pcln.File[pcln.Nfile] = f
-	pcln.Nfile++
+	for i, file := range pcln.File {
+		if file == f {
+			pcln.Lastfile = f
+			pcln.Lastindex = int(i)
+			return int32(i)
+		}
+	}
+	pcln.File = append(pcln.File, f)
}
diff {
-	var n int
-	var havepc *uint32
-	var havefunc *uint32
}
diff {
-	n = ((npcdata+31)/32 + (nfuncdata+31)/32) * 4
-
-	havepc = (*uint32)(make([]byte, n))
-	havefunc = havepc + (npcdata+31)/32
+	havepc := make([]uint32, (npcdata+31)/32)
+	havefunc := make([]uint32, (nfuncdata+31)/32)
}

func yy_isalpha(c int) bool {
	return 'a' <= c && c <= 'z' || 'A' <= c && c <= 'Z'
}
diff {
-	nuxiinit(arch)
}
diff {
-	ctxt.Goroot = main.Getgoroot()
-	ctxt.Goroot_final = main.Getenv("GOROOT_FINAL")
-	if ctxt.Goroot_final != nil && ctxt.Goroot_final[0] == '\x00' {
-		ctxt.Goroot_final = nil
-	}
+	ctxt.Goroot = Getgoroot()
+	ctxt.Goroot_final = os.Getenv("GOROOT_FINAL")
}
diff {
-	p = main.Getgoarch()
+	p = Getgoarch()
}
diff {
-	if main.Getwd(buf, sizeof(buf)) == 0 {
-		buf = "/???"
-	}
-	if yy_isalpha(int(buf[0])) && buf[1] == ':' {
-		// On Windows.
-		ctxt.Windows = 1
-
-		// Canonicalize path by converting \ to / (Windows accepts both).
-		for p = buf; p[0] != 0; p = p[1:] {
-
-			if p[0] == '\\' {
-				p[0] = '/'
-			}
-		}
-	}
+	buf, _ = os.Getwd()
+	if buf == "" {
+		buf = "/???"
+	}
+	buf = filepath.ToSlash(buf)
}
diff {
-	ctxt.Headtype = headtype(main.Getgoos())
+	ctxt.Headtype = headtype(Getgoos())
	if ctxt.Headtype < 0 {
-		log.Fatalf("unknown goos %s", main.Getgoos())
+		log.Fatalf("unknown goos %s", Getgoos())
	}
}
diff {
-		p = main.Getgoarm()
-		if p != nil {
-			ctxt.Goarm = int32(main.Atoi(p))
+		p = Getgoarm()
+		if p != "" {
+			ctxt.Goarm = int32(Atoi(p))
}

delete linksymfmt


slice asmoutnacl.out
slice asmout.out

bool immfloat.return
bool immhalf.return
bool cmp.return

diff {
-			xcmp[i][n] = uint8(bool2int(cmp(n, i)))
+			if cmp(n, i) {
+				xcmp[i][n] = 1
+			}
}

diff {
-			fmt.Fprintf(ctxt.Bso, "%5.2f span1\n", main.Cputime())
+			fmt.Fprintf(ctxt.Bso, "%5.2f span1\n", liblink1.Cputime())
}

slice oplook.o
slice oplook.e
slice Oprang.start
slice Oprang.stop
