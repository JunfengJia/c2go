package src/liblink/* include/* src/cmd/ld/* src/runtime/*h cmd/internal/obj
package src/liblink/*5.c src/cmd/5l/*.h cmd/internal/obj/arm
package src/liblink/*6.c src/cmd/6l/*.h cmd/internal/obj/x86
package src/liblink/*8.c src/cmd/8l/*.h cmd/internal/obj/i386
package src/liblink/*9.c src/cmd/9l/*.h cmd/internal/obj/ppc64
package src/liblink/objfilego.c main
package src/cmd/5a/* cmd/new5a
package src/cmd/6a/* cmd/new6a
package src/cmd/8a/* cmd/new8a
package src/cmd/9a/* cmd/new9a
package src/cmd/cc/*body cmd/internal/asm
package src/cmd/gc/* cmd/internal/gc
package src/cmd/5g/* cmd/new5g
package src/cmd/6g/* cmd/new6g
package src/cmd/8g/* cmd/new8g
package src/cmd/9g/* cmd/new9g

delete dnames5 dnames6 dnames8 dnames9
delete emallocz estrdup erealloc

delete find1 nuxiinit fnuxi8 fnuxi4 inuxi1 inuxi2 inuxi4 inuxi8 atolwhex
delete writeobj

# we define our own Biobuf
delete Biobuf

# delete all the object file reading code. debug/goobj does that better.
delete ldobjfile readsym rdint rdstring rddata rdsym 

slice LSym.p LSym.np LSym.maxp
slice LSym.r LSym.nr LSym.maxr
slice Link.library Link.libraryp Link.nlibrary
slice Link.libdir Link.nlibdir Link.maxlibdir
slice Arch.typedefs

bool yy_isalpha.return

ptr bytereg.t
slice doasm.mo

slice Pcdata.p Pcdata.n Pcdata.m

export linkamd64 linkamd64p32 link386 linkarm linkppc64 linkppc64le linknew binitw writeobjdirect linklinehist linknewplist

rename regstr Register
rename anames8 Anames
rename anames6 Anames
rename anames5 Anames
rename anames9 Anames

func expandpkg(t0 string, pkg string) string {
	return strings.Replace(t0, `"".`, pkg+".", -1)
}

func Symgrow(ctxt *Link, s *LSym, lsiz int64) {
	var siz int
	siz = int(lsiz)
	if int64(siz) != lsiz {
		log.Fatal("Symgrow size %d too long", lsiz)
	}
	if len(s.P) >= siz {
		return
	}
	for cap(s.P) < siz {
		s.P = append(s.P[:cap(s.P)], 0)
	}
	s.P = s.P[:siz]
}

func savedata(ctxt *Link, s *LSym, p *Prog, pn string) {
	off := int32(p.From.Offset)
	siz := int32(p.From3.Offset)
	if off < 0 || siz < 0 || off >= 1<<30 || siz >= 100 {
		mangle(pn)
	}
	if ctxt.Enforce_data_order != 0 && off < int32(len(s.P)) {
		ctxt.Diag("data out of order (already have %d)\n%P", len(s.P), p)
	}
	Symgrow(ctxt, s, int64(off+siz))
	
	switch int(p.To.Type) {
	default:
		ctxt.Diag("bad data: %P", p)

	case TYPE_FCONST:
		switch siz {
		default:
			ctxt.Diag("unexpected %d-byte floating point constant", siz)
		
		case 4:
			flt := math.Float32bits(float32(p.To.U.Dval))
			ctxt.Arch.ByteOrder.PutUint32(s.P[off:], flt)
		
		case 8:
			flt := math.Float64bits(p.To.U.Dval)
			ctxt.Arch.ByteOrder.PutUint64(s.P[off:], flt)
		}

	case TYPE_SCONST:
		copy(s.P[off:off+siz], p.To.U.Sval)
	
	case TYPE_CONST, TYPE_ADDR:
		if p.To.Sym != nil || int(p.To.Type) == TYPE_ADDR {
			r := Addrel(s)
			r.Off = off
			r.Siz = uint8(siz)
			r.Sym = p.To.Sym
			r.Type = R_ADDR
			r.Add = p.To.Offset
			break
		}
		o := p.To.Offset
		switch siz {
		default:
			ctxt.Diag("unexpected %d-byte integer constant", siz)
		case 1:
			s.P[off] = byte(o)
		case 2:
			ctxt.Arch.ByteOrder.PutUint16(s.P[off:], uint16(o))
		case 4:
			ctxt.Arch.ByteOrder.PutUint32(s.P[off:], uint32(o))
		case 8:
			ctxt.Arch.ByteOrder.PutUint64(s.P[off:], uint64(o))
		}
	}	
}

func Addrel(s *LSym) *Reloc {
	s.R = append(s.R, Reloc{})
	return &s.R[len(s.R)-1]
}

export setuintxx

func Setuintxx(ctxt *Link, s *LSym, off int64, v uint64, wid int64) int64 {
	if s.Type == 0 {
		s.Type = SDATA
	}
	s.Reachable = 1
	if s.Size < off+wid {
		s.Size = off + wid
		Symgrow(ctxt, s, s.Size)
	}

	switch wid {
	case 1:
		s.P[off] = uint8(v)
	case 2:
		ctxt.Arch.ByteOrder.PutUint16(s.P[off:], uint16(v))
	case 4:
		ctxt.Arch.ByteOrder.PutUint32(s.P[off:], uint32(v))
	case 8:
		ctxt.Arch.ByteOrder.PutUint64(s.P[off:], uint64(v))
	}
	
	return off+wid
}

diff {
type LinkArch struct {
+	ByteOrder	binary.ByteOrder
}

func addlib(ctxt *Link, src, obj, pathname string) {
	name := path.Clean(pathname)

	// runtime.a -> runtime
	short := strings.TrimSuffix(name, ".a")

	// already loaded?
	for i := range ctxt.Library {
		if ctxt.Library[i].Pkg == short {
			return
		}
	}

	var pname string
	// runtime -> runtime.a for search
	if (!(ctxt.Windows != 0) && name[0] == '/') || (ctxt.Windows != 0 && name[1] == ':') {
		pname = name
	} else {
		// try dot, -L "libdir", and then goroot.
		for _, dir := range ctxt.Libdir {
			pname = dir + "/" + name
			if _, err := os.Stat(pname); !os.IsNotExist(err) {
				break
			}
		}
	}
	pname = path.Clean(pname)

	// runtime.a -> runtime
	pname = strings.TrimSuffix(pname, ".a")

	if ctxt.Debugvlog > 1 && ctxt.Bso != nil {
		fmt.Fprintf(ctxt.Bso, "%5.2f addlib: %s %s pulls in %s\n", Cputime(), obj, src, pname)
	}
	addlibpath(ctxt, src, obj, pname, name)
}

func addlibpath(ctxt *Link, srcref, objref, file, pkg string) {
	for _, lib := range ctxt.Library {
		if lib.File == file {
			return
		}
	}
	
	if ctxt.Debugvlog > 1 && ctxt.Bso != nil {
		fmt.Fprintf(ctxt.Bso, "%5.2f addlibpath: srcref: %s objref: %s file: %s pkg: %s\n", Cputime(), srcref, objref, file, pkg)
	}

	ctxt.Library = append(ctxt.Library, Library{
		Objref: objref,
		Srcref: srcref,
		File: file,
		Pkg: pkg,
	})
}

diff {
func Copyp(ctxt *Link, q *Prog) *Prog {
}

export linklinefmt
diff {
-func linklinefmt(ctxt *Link, lno0 int, showAll, showFullPath bool) string {
+func Linklinefmt(ctxt *Link, lno0 int, showAll, showFullPath bool) string {
}

func linklinefmt(ctxt *Link, lno0 int, showAll, showFullPath bool) string {
	var a [HISTSZ]struct {
		incl *Hist
		idel int32
		line *Hist
		ldel int32
	}
	lno := int32(lno0)
	lno1 := lno
	var d int32
	var i int
	var n int
	var h *Hist
	n = 0
	var fp string
	for h = ctxt.Hist; h != nil; h = h.Link {
		if h.Offset < 0 {
			continue
		}
		if lno < h.Line {
			break
		}
		if h.Name != "<pop>" {
			if h.Offset > 0 {
				// #line directive
				if n > 0 && n < int(HISTSZ) {
					a[n-1].line = h
					a[n-1].ldel = h.Line - h.Offset + 1
				}
			} else {
				// beginning of file
				if n < int(HISTSZ) {
					a[n].incl = h
					a[n].idel = h.Line
					a[n].line = nil
				}
				n++
			}
			continue
		}
		n--
		if n > 0 && n < int(HISTSZ) {
			d = h.Line - a[n].incl.Line
			a[n-1].ldel += d
			a[n-1].idel += d
		}
	}
	if n > int(HISTSZ) {
		n = int(HISTSZ)
	}
	for i = n - 1; i >= 0; i-- {
		if i != n-1 {
			if !showAll {
				break
			}
			fp += " "
		}
		if ctxt.Debugline != 0 || showFullPath {
			fp += fmt.Sprintf("%s/", ctxt.Pathname)
		}
		if a[i].line != nil {
			fp += fmt.Sprintf("%s:%d[%s:%d]", a[i].line.Name, lno-a[i].ldel+1, a[i].incl.Name, lno-a[i].idel+1)
		} else {
			fp += fmt.Sprintf("%s:%d", a[i].incl.Name, lno-a[i].idel+1)
		}
		lno = a[i].incl.Line - 1 // now print out start of this file
	}
	if n == 0 {
		fp += fmt.Sprintf("<unknown line number %d %d %d %s>", lno1, ctxt.Hist.Offset, ctxt.Hist.Line, ctxt.Hist.Name)
	}
	return fp
}

func haspathprefix(s string, t string) bool {
	var i int
	var cs int
	var ct int
	if len(t) > len(s) {
		return false
	}
	for i = 0; i < len(t); i++ {
		cs = int(s[i])
		ct = int(t[i])
		if 'A' <= cs && cs <= 'Z' {
			cs += 'a' - 'A'
		}
		if 'A' <= ct && ct <= 'Z' {
			ct += 'a' - 'A'
		}
		if cs == '\\' {
			cs = '/'
		}
		if ct == '\\' {
			ct = '/'
		}
		if cs != ct {
			return false
		}
	}
	return i >= len(s) || s[i] == '/' || s[i] == '\\'
}

func linkgetline(ctxt *Link, line int32, f **LSym, l *int32) {
	var a [HISTSZ]struct {
		incl *Hist
		idel int32
		line *Hist
		ldel int32
	}
	var lno int32
	var d int32
	var dlno int32
	var n int
	var h *Hist
	var buf string
	var buf1 string
	var file string
	lno = int32(line)
	n = 0
	for h = ctxt.Hist; h != nil; h = h.Link {
		if h.Offset < 0 {
			continue
		}
		if lno < h.Line {
			break
		}
		if h.Name != "<pop>" {
			if h.Offset > 0 {
				// #line directive
				if n > 0 && n < HISTSZ {
					a[n-1].line = h
					a[n-1].ldel = h.Line - h.Offset + 1
				}
			} else {
				// beginning of file
				if n < HISTSZ {
					a[n].incl = h
					a[n].idel = h.Line
					a[n].line = nil
				}
				n++
			}
			continue
		}
		n--
		if n > 0 && n < HISTSZ {
			d = h.Line - a[n].incl.Line
			a[n-1].ldel += d
			a[n-1].idel += d
		}
	}
	if n > HISTSZ {
		n = HISTSZ
	}
	if n <= 0 {
		*f = Linklookup(ctxt, "??", HistVersion)
		*l = 0
		return
	}
	n--
	if a[n].line != nil {
		file = a[n].line.Name
		dlno = a[n].ldel - 1
	} else {
		file = a[n].incl.Name
		dlno = a[n].idel - 1
	}
	if (ctxt.Windows == 0 && file[0] == '/') || (ctxt.Windows != 0 && file[1] == ':') || file[0] == '<' {
		buf = fmt.Sprintf("%s", file)
	} else {
		buf = fmt.Sprintf("%s/%s", ctxt.Pathname, file)
	}
	// Remove leading ctxt->trimpath, or else rewrite $GOROOT to $GOROOT_FINAL.
	if ctxt.Trimpath != "" && haspathprefix(buf, ctxt.Trimpath) {
		if len(buf) == len(ctxt.Trimpath) {
			buf = "??"
		} else {
			buf1 = fmt.Sprintf("%s", buf[len(ctxt.Trimpath)+1:])
			if buf1[0] == '\x00' {
				buf1 = "??"
			}
			buf = buf1
		}
	} else if ctxt.Goroot_final != "" && haspathprefix(buf, ctxt.Goroot) {
		buf1 = fmt.Sprintf("%s%s", ctxt.Goroot_final, buf[len(ctxt.Goroot):])
		buf = buf1
	}
	lno -= dlno
	*f = Linklookup(ctxt, buf, HistVersion)
	*l = lno
}

func linkprfile(ctxt *Link, line int) {
	l := int32(line)
	var i int
	var n int
	var a [HISTSZ]Hist
	var h *Hist
	var d int32
	n = 0
	for h = ctxt.Hist; h != nil; h = h.Link {
		if l < h.Line {
			break
		}
		if h.Name != "<pop>" {
			if h.Offset == 0 {
				if n >= 0 && n < HISTSZ {
					a[n] = *h
				}
				n++
				continue
			}
			if n > 0 && n < HISTSZ {
				if a[n-1].Offset == 0 {
					a[n] = *h
					n++
				} else {
					a[n-1] = *h
				}
			}
			continue
		}
		n--
		if n >= 0 && n < HISTSZ {
			d = h.Line - a[n].Line
			for i = 0; i < n; i++ {
				a[i].Line += d
			}
		}
	}
	if n > HISTSZ {
		n = HISTSZ
	}
	for i = 0; i < n; i++ {
		fmt.Printf("%s:%d ", a[i].Name, int(l-a[i].Line+a[i].Offset+1))
	}
}

func wrdata(b *Biobuf, v []byte) {
	wrint(b, int64(len(v)))
	Bwrite(b, v)
}

func wrstring(b *Biobuf, s string) {
	wrint(b, int64(len(s)))
	b.w.WriteString(s)
}

func wrpath(ctxt *Link, b *Biobuf, p string) {
	wrstring(b, filepath.ToSlash(p))
}

func wrint(b *Biobuf, sval int64) {
	var uv uint64
	var v uint64
	var buf [10]uint8
	var p []uint8
	uv = (uint64(sval) << 1) ^ uint64(int64(sval>>63))
	p = buf[:]
	for v = uv; v >= 0x80; v >>= 7 {
		p[0] = uint8(v | 0x80)
		p = p[1:]
	}
	p[0] = uint8(v)
	p = p[1:]
	Bwrite(b, buf[:len(buf)-len(p)])
}

slice Pcln.funcdata Pcln.nfuncdata Pcln.mfuncdata
slice Pcln.pcdata Pcln.npcdata Pcln.mpcdata
slice Pcln.file Pcln.nfile Pcln.mfile
slice Pcln.funcdataoff Pcln.nfuncdata

func addvarint(ctxt *Link, d *Pcdata, val uint32) {
	var v uint32
	for v = val; v >= 0x80; v >>= 7 {
		d.P = append(d.P, uint8(v|0x80))
	}
	d.P = append(d.P, uint8(v))
}

diff {
-	for i = 0; i < int32(len(pcln.File)); i++ {
-		if pcln.File[i] == f {
-			pcln.Lastfile = f
-			pcln.Lastindex = int(i)
-			return i
-		}
-	}
-
-	if len(pcln.File) >= cap(pcln.File) {
-		cap(pcln.File) = (len(pcln.File) + 1) * 2
-		pcln.File = erealloc(pcln.File, cap(pcln.File)*sizeof(pcln.File[0])).([]*LSym)
-	}
-
-	pcln.File[len(pcln.File)] = f
-	len(pcln.File)++
+	for i = 0; i < int32(len(pcln.File)); i++ {
+		file := pcln.File[i]
+		if file == f {
+			pcln.Lastfile = f
+			pcln.Lastindex = int(i)
+			return int32(i)
+		}
+	}
+	pcln.File = append(pcln.File, f)
}
diff {
-	var n int
-	var havepc *uint32
-	var havefunc *uint32
}
diff {
-	n = ((npcdata+31)/32 + (nfuncdata+31)/32) * 4
-
-	havepc = (*uint32)(make([]byte, n))
-	havefunc = havepc + (npcdata+31)/32
+	havepc := make([]uint32, (npcdata+31)/32)
+	havefunc := make([]uint32, (nfuncdata+31)/32)
}

func yy_isalpha(c int) bool {
	return 'a' <= c && c <= 'z' || 'A' <= c && c <= 'Z'
}
diff {
-	nuxiinit(arch)
}
diff {
-	ctxt.Goroot = main.Getgoroot()
-	ctxt.Goroot_final = main.Getenv("GOROOT_FINAL")
-	if ctxt.Goroot_final != "" && ctxt.Goroot_final[0] == '\x00' {
-		ctxt.Goroot_final = ""
-	}
+	ctxt.Goroot = Getgoroot()
+	ctxt.Goroot_final = os.Getenv("GOROOT_FINAL")
}
diff {
-	p = main.Getgoarch()
+	p = Getgoarch()
}
diff {
-	if main.Getwd(buf, sizeof(buf)) == 0 {
-		buf = "/???"
-	}
-	if yy_isalpha(int(buf[0])) && buf[1] == ':' {
-		// On Windows.
-		ctxt.Windows = 1
-
-		// Canonicalize path by converting \ to / (Windows accepts both).
-		for p = buf; p[0] != 0; p = p[1:] {
-			if p[0] == '\\' {
-				p[0] = '/'
-			}
-		}
-	}
+	buf, _ = os.Getwd()
+	if buf == "" {
+		buf = "/???"
+	}
+	buf = filepath.ToSlash(buf)
}
diff {
-	ctxt.Headtype = headtype(main.Getgoos())
+	ctxt.Headtype = headtype(Getgoos())
	if ctxt.Headtype < 0 {
-		log.Fatalf("unknown goos %s", main.Getgoos())
+		log.Fatalf("unknown goos %s", Getgoos())
	}
}
diff {
-		p = main.Getgoarm()
-		if p != "" {
-			ctxt.Goarm = int32(main.Atoi(p))
+		p = Getgoarm()
+		if p != "" {
+			ctxt.Goarm = int32(Atoi(p))
}

delete linksymfmt


slice asmoutnacl.out
slice asmout.out

bool immfloat.return
bool immhalf.return
bool cmp.return
bool isdata.return
bool iscall.return
bool LinkArch.iscall.return
bool LinkArch.isdata.return

diff {
-			xcmp[i][n] = uint8(bool2int(cmp(n, i)))
+			if cmp(n, i) {
+				xcmp[i][n] = 1
+			}
}

diff {
-			fmt.Fprintf(ctxt.Bso, "%5.2f span1\n", main.Cputime())
+			fmt.Fprintf(ctxt.Bso, "%5.2f span1\n", obj.Cputime())
}

slice oplook.o
slice oplook.e
slice Oprang.start
slice Oprang.stop

delete listinit5 listinit6 listinit8 listinit9

diff {
-		op = string(&"<<>>->@>"[((v>>5)&3)<<1])
+		op = string("<<>>->@>"[((v>>5)&3)<<1:])
}

delete DSconv

diff {
type Prog struct {
+	Ctxt *Link
}

diff {
type LinkArch struct {
+	Pconv func(*Prog) string
}

diff {
= obj.LinkArch{
+	Pconv: Pconv,
}

diff {
amd64 = obj.LinkArch{
+	ByteOrder: binary.LittleEndian,
}
diff {
amd64p32 = obj.LinkArch{
+	ByteOrder: binary.LittleEndian,
}
diff {
arm = obj.LinkArch{
+	ByteOrder: binary.LittleEndian,
}
diff {
386 = obj.LinkArch{
+	ByteOrder: binary.LittleEndian,
}
diff {
ppc64 = obj.LinkArch{
+	ByteOrder: binary.BigEndian,
}
diff {
ppc64le = obj.LinkArch{
+	ByteOrder: binary.LittleEndian,
}

diff {
-		main.Memmove(p, nop[m-1], m)
+		copy(p[:m], nop[m-1][:m])
}
diff {
-			main.Memmove(s.P[p.Pc:], ctxt.And, m)
+			copy(s.P[p.Pc:][:m], ctxt.And[:m])
}

# TODO(rsc): Why does len rewrite not catch this?
diff {
-	wrdata(b, s.P, len(s.P))
+	wrdata(b, s.P)
}

diff {
-		main.Memmove(and0[np+1:], and0[np:], n-np)
+		copy(and0[np+1:], and0[np:n])
}

diff {
-		fmt.Fprintf(ctxt.Bso, "%5.2f noops\n", main.Cputime())
+		fmt.Fprintf(ctxt.Bso, "%5.2f noops\n", obj.Cputime())
}
diff {
-			cast = []byte(&out[i])
-			for j = 0; j < 4; j++ {
-				bp[0] = cast[obj.Inuxi4[j]]
-				bp = bp[1:]
-			}
+			ctxt.Arch.ByteOrder.PutUint32(bp, out[i])
+			bp = bp[4:]
}
diff {
	var i int32
-	var j int32
	var bp []byte
-	var cast []byte
}

diff {
-	var p string
	var h uint32
-	var c int

	h = uint32(v)
-	for p = symb; ; p = p[1:] {
-		c = int(p[0])
-		if !(c != 0) {
-			break
-		}
+	for i := 0; i < len(symb); i++ {
+		c := int(symb[i])
}
diff {
-	StackPreempt = 1
+	StackPreempt = -1314 // 0xfff...fade
}
diff {
-		p.From.Offset = int64(uint32(obj.StackPreempt))
+		p.From.Offset = int64(uint32(obj.StackPreempt & (1<<32-1)))
}
diff {
-		p.To.Offset = int64(uint32(obj.StackPreempt))
+		p.To.Offset = int64(uint32(obj.StackPreempt & (1<<32-1)))
}
diff {
-	if (ctxt.Windows == 0 && file[0] == '/') || (ctxt.Windows != 0 && file[1] == ':') || file[0] == '<' {
+	if filepath.IsAbs(file) || strings.HasPrefix(file, "<") {
}
diff {
-	p = Getgoarch()
-	if p != arch.Name {
-		log.Fatalf("invalid goarch %s (want %s)", p, arch.Name)
-	}
-
}

# export linkprfile via diff, because it was supplied as a func above.
# the matching for the func doesn't work right if you say func Linkprfile,
# but the func overrides any 'export linkprfile'.
diff {
-func linkprfile(ctxt *Link, line int) {
+func Linkprfile(ctxt *Link, line int) {
}

func prg() *obj.Prog {
	p := zprg
	return &p
}

diff {
-	main.Exits("unknown experiment")
+	os.Exit(2)
}

func linksetexp() {
	for _, f := range strings.Split(goexperiment, ",") {
		if f != "" {
			addexp(f)
		}
	}
}

func expstring() string {
	buf := "X"
	for i := range exper {
		if *exper[i].val != 0 {
			buf += "," + exper[i].name
		}
	}
	if buf == "X" {
		buf += ",none"
	}
	return "X:" + buf[2:]
}

diff {
-			ctxt.Diag("argument %v is TYPE_CONST, should be TYPE_ADDR, in %v", Dconv(p, 0, a), p)
+			ctxt.Diag("argument is TYPE_CONST, should be TYPE_ADDR, in %v", p)
}

diff {
-			ctxt.Diag("argument %v is TYPE_ADDR, should be TYPE_CONST, in %v", Dconv(p, 0, a), p)
+			ctxt.Diag("argument is TYPE_ADDR, should be TYPE_CONST, in %v", p)
}

diff {
-	ctxt.Diag("invalid encoding for argument %v in %v", Dconv(p, 0, a), p)
+	ctxt.Diag("invalid encoding for argument %v", p)
}

diff {
-	ArgsSizeUnknown            = 0x80000000
+	ArgsSizeUnknown            = -0x80000000
}

diff {
-new(Prog)
+ctxt.NewProg()
}
diff {
-				if str[0] == 0 {
+				if str == "" {
					str += "[R"
}

# compiler starts roughly here

diff {
-	b [XXX]uint32
+	b []uint32
}

func bvalloc(n int32) *Bvec {
	return &Bvec{n, make([]uint32, bvsize(uint32(n))/4)}
}

diff {
-	return main.Memcmp(bv1.b, bv2.b, int(nbytes))
+	for i, x := range bv1.b {
+		if x != bv2.b[i] {
+			return 1
+		}
+	}
+	return 0
}

diff {
-	main.Memmove(dst.b, src.b, bvsize(uint32(dst.n)))
+	for i, x := range src.b {
+		dst.b[i] = x
+	}
}

diff {
-	main.Memset(bv.b, 0x00, bvsize(bv.n))
+	for i := range bv.b {
+		bv.b[i] = 0
+	}
}

diff {
- indent((*obj.Fmt)(fp))
+ fp = indent(fp)
}

func indent(s string) string {
	return s + "\n" + strings.Repeat(".   ", dumpdepth)
}

slice dotoffset.oary

delete DEFAULTCAPACITY arraynew arrayfree arraylength arrayget arrayset ensurecapacity arrayadd arraysort

slice Liveness.uevar
slice Liveness.varkill
slice Liveness.livein
slice Liveness.liveout
slice Liveness.avarinit
slice Liveness.avarinitany
slice Liveness.avarinitall
slice inithash.autohash inithash.nautohash
slice indexdup.hash indexdup.nhash
slice keydup.hash keydup.nhash
slice fielddup.hash fielddup.nhash
slice typecheckcomplit.hash typecheckcomplit.nhash

diff {
-func vmkcall(fn *Node, t *Type, init **NodeList, va []interface{}) *Node {
+func vmkcall(fn *Node, t *Type, init **NodeList, va []*Node) *Node {
}

diff {
	for i = 0; i < n; i++ {
-		args = list(args, va_arg(va, *Node))
+		args = list(args, va[i])
}

func mkcall(name string, t *Type, init **NodeList, args ...*Node) *Node {
	return vmkcall(syslook(name, 0), t, init, args)
}

func mkcall1(fn *Node, t *Type, init **NodeList, args ...*Node) *Node {
	return vmkcall(fn, t, init, args)
}

diff {
- hash = hash[:inithash(n, (***Node)(&hash), autohash[:])]
+ hash = inithash(n, autohash[:])
}

diff {
- func inithash(n *Node, hash ***Node, autohash []*Node) uint32 {
+ func inithash(n *Node, autohash []*Node) []*Node {
}
diff {
-		*hash = &autohash[0]
-		for i = 0; i < len(autohash); i++ {
-			(*hash)[i] = nil
-		}
-		return uint32(len(autohash))
+		for i := range autohash {
+			autohash[i] = nil
+		}
+		return autohash
}
diff {
	// build and return a throw-away hash table
-	*hash = make([]*Node, h)
-
-	for i = 0; i < h; i++ {
-		(*hash)[i] = nil
-	}
-	return h
+	return make([]*Node, h)
}
diff {
-		s = string(&d)
-		b = 0
-		for i = sizeof(d); i > 0; i-- {
-			b = b*PRIME1 + uint32(s[0])
-			s = s[1:]
-		}
+		x := math.Float64bits(d)
+		for i := 0; i < 8; i++ {
+			b = b*PRIME1 + uint32(x&0xFF)
+			x >>= 8
+		}
}

diff {
func onearg(n *Node, f string, args ...interface{}) int {
-	var arg []interface{}
}
diff {
-		main.Va_start(arg, f)
-		p = obj.Vsmprint(f, arg)
-		main.Va_end(arg)
+		p = fmt.Sprintf(f, args...)
}

diff {
-		if descbuf < sizeof(descbuf) {
			desc = descbuf
-		} else {
-			desc = "function argument"
-		}
}

slice postorder.rpo2r
slice flowrpo.rpo2r
slice rpolca.idom
slice loophead.idom
slice flowrpo.idom
slice doms.idom
slice Graph.rpo
slice InitPlan.e
slice err nerr merr
rename err errors
slice ispkgin.pkgs ispkgin.n
slice mergetemp.var mergetemp.nvar
rename append walkappend

func stringtoarraylit(np **Node) {
	n := *np
	if n.Left.Op != OLITERAL || n.Left.Val.Ctype != CTSTR {
		Fatal("stringtoarraylit %N", n)
	}

	s := n.Left.Val.U.Sval.S
	var l *NodeList
	if n.Type.Type.Etype == TUINT8 {
		// []byte
		for i := 0; i < len(s); i++ {
			l = list(l, Nod(OKEY, Nodintconst(int64(i)), Nodintconst(int64(s[0]))))
		}
	} else {
		// []rune
		i := 0
		for _, r := range s {
			l = list(l, Nod(OKEY, Nodintconst(int64(i)), Nodintconst(int64(r))))
			i++
		}
	}

	nn := Nod(OCOMPLIT, nil, typenod(n.Type))
	nn.List = l
	typecheck(&nn, Erv)
	*np = nn
}
diff {
-func sprint_depchain(fmt_ *obj.Fmt, stack *NodeList, cur *Node, first *Node) {
+func sprint_depchain(fmt_ *string, stack *NodeList, cur *Node, first *Node) {
}
diff {
-			fmt_ += fmt.Sprintf("\n\t%v: %v uses %v", l.N.Line(), Nconv(l.N, 0), Nconv(cur, 0))
+			*fmt_ += fmt.Sprintf("\n\t%v: %v uses %v", l.N.Line(), Nconv(l.N, 0), Nconv(cur, 0))
}
diff {
-			sprint_depchain((*obj.Fmt)(&fmt_), tcstack, n, n)
+			sprint_depchain(&fmt_, tcstack, n, n)
}
diff {
-	for s[0] != 0 {
-		s = s[main.Chartorune(&r, s):]
-		if r == main.Runeerror {
+	for _, r := range s {
+		if r == utf8.RuneError {
}
diff {
func isbadimport(path *Strlit) int {
	var i int
	var s string
-	var r uint
}

func newstrlit(s string) *Strlit {
	return &Strlit{
		S: s,
		Len: int32(len(s)),
	}
}

diff {
-		if p.Path.Len == path.Len && main.Memcmp(path.S, p.Path.S, path.Len) == 0 {
+		if p.Path.Len == path.Len && p.Path.S == path.S {
}

func pathtoprefix(s string) string {
	slash := strings.LastIndex(s, "/")
	if slash < 0 {
		slash = len(s)
	}
	for i := 0; i < len(s); i++ {
		c := s[i]
		if c <= ' ' || i >= slash && c == '.' || c == '%' || c == '"' || c >= 0x7F {
			goto escape
		}
	}
	return s

escape:
	var buf bytes.Buffer
	for i := 0; i < len(s); i++ {
		c := s[i]
		if c <= ' ' || i >= slash && c == '.' || c == '%' || c == '"' || c >= 0x7F {
			fmt.Fprintf(&buf, "%%%02x", c)
			continue
		}
		buf.WriteByte(c)
	}
	return buf.String()
}

diff {
-		n.List = (*NodeList)(1)
+		n.List = nil
}

bool eqnote.return

func eqnote(a, b *Strlit) bool {
	return a == b || a != nil && b != nil && a.Len == b.Len && a.S == b.S
}

delete remal mal

diff {
-	s.Name = string(make([]byte, main.Strlen(name)+1))
}

func entry(p *InitPlan) *InitEntry {
	p.E = append(p.E, InitEntry{})
	return &p.E[len(p.E)-1]
}

diff {
-	main.Va_start(arg, fmt_)
-	obj.Vfprint(1, fmt_, arg)
-	main.Va_end(arg)
+	fmt.Printf(fmt_, args...)
}
diff {
func Fatal(fmt_ string, args ...interface{}) {
-	var arg []interface{}
}

diff {
-	var arg []interface{}
-
-	main.Va_start(arg, fmt_)
-	adderr(line, fmt_, arg)
-	main.Va_end(arg)
+	adderr(line, fmt_, args)
}

diff {
-	main.Va_start(arg, fmt_)
-	adderr(parserline(), fmt_, arg)
-	main.Va_end(arg)
+	adderr(parserline(), fmt_, args)
}
diff {
func Warn(fmt_ string, args ...interface{}) {
-	var arg []interface{}
}

diff {
func Yyerror(fmt_ string, args ...interface{}) {
	var i int
	var lastsyntax int
-	var arg []interface{}
}

func adderr(line int, format string, args []interface{}) {
	errors = append(errors, Error{
		seq: len(errors),
		lineno: line,
		msg: fmt.Sprintf("%v: %s\n", Ctxt.Line(line), fmt.Sprintf(format, args...)),
	})
}

delete ucistrcmp

diff {
-	if strings.HasPrefix(main.Getgoversion(), "release") {
+	if strings.HasPrefix(obj.Getgoversion(), "release") {
}

diff {
-			main.Strecpy(buf, buf[sizeof(buf):], fmt_)
-
-			p = main.Strstr(buf, "{ or {")
-			if p != "" {
-				main.Memmove(p[1:], p[6:], len(p+6)+1)
-			}
-
-			// The grammar has ? and @ but only for reading imports.
-			// Silence them in ordinary errors.
-			p = main.Strstr(buf, " or ?")
-
-			if p != "" {
-				main.Memmove(p, p[5:], len(p+5)+1)
-			}
-			p = main.Strstr(buf, " or @")
-			if p != "" {
-				main.Memmove(p, p[5:], len(p+5)+1)
-			}
-			fmt_ = buf
+			// The grammar has ? and @ but only for reading imports.
+			// Silence them in ordinary errors.
+			fmt_ = strings.Replace(fmt_, "{ or {", "{", -1)
+			fmt_ = strings.Replace(fmt_, " or ?", "", -1)
+			fmt_ = strings.Replace(fmt_, " or @", "", -1)
}

diff {
-		*(*int)(0) = 0
+		var x *int
+		*x = 0
}
diff {
-main.Remove(outfile)
+os.Remove(outfile)
}
diff {
-main.Exits("error")
+os.Exit(2)
}

diff {
- main.Atoi(note.S[4:])
+ atoi(note.S[4:])
}

diff {
- uint32(^0)
+ ^uint32(0)
}
diff {
-	obj.Snprint(namebuf, sizeof(namebuf), namefmt, nsym)
+	namebuf = fmt.Sprintf(namefmt, nsym)
}
diff {
-	b = obj.Bopen(asmhdr, main.OWRITE)
-	if b == nil {
-		Fatal("open %s: %v", asmhdr, err)
-	}
+	b, err := obj.Bopenw(asmhdr)
+	if err != nil {
+		Fatal("%v", err)
+	}
}

bool exportname.return
func exportname(s string) bool {
	if s[0] < utf8.RuneSelf {
		return 'A' <= s[0] && s[0] <= 'Z'
	}
	r, _ := utf8.DecodeRuneInString(s)
	return unicode.IsUpper(r)
}

diff {
-	if strings.ContainsRune(s.Name, CenterDot) {
-		name = s.Name
-		main.Utfrune(name, CenterDot) = ""
-	}
+	if i := strings.Index(s.Name, string(CenterDot)); i >= 0 {
+		name = s.Name[:i]
+	}
}
diff {
-					main.Memmove(str.S[len:], nr.Val.U.Sval.S, nr.Val.U.Sval.Len)
+					str.S += nr.Val.U.Sval.S
}
diff {
-				str = (*Strlit)(make([]byte, sizeof(*str)+len))
-
+				str = &Strlit{}
}
diff {
-		l = main.Runelen(rune)
-		s = (*Strlit)(make([]byte, sizeof(*s)+l))
-		s.Len = int32(l)
-		main.Runetochar(string(s.S), &rune)
+		s = &Strlit{S: string(rune)}
+		s.Len = int32(len(s.S))
}

diff {
-func getvariables(fn *Node) *Array {
-	var result *Array
+func getvariables(fn *Node) []*Node {
+	var result []*Node
}
diff {
-func newcfg(firstp *obj.Prog) *Array {
+func newcfg(firstp *obj.Prog) []*BasicBlock {
}
diff {
-var selectgo *Array
+var selectgo []*BasicBlock
}
diff {
-	return (*Array)(cfg)
+	return cfg
}
diff {
-func newliveness(fn *Node, ptxt *obj.Prog, cfg *Array, vars *Array) *Liveness {
+func newliveness(fn *Node, ptxt *obj.Prog, cfg []*BasicBlock, vars []*Node) *Liveness {
}
diff {
-	var cfg *Array
+	var cfg []*BasicBlock
}
diff {
-	var vars *Array
+	var vars []*Node
}
diff {
-func getvariables(fn *Node) *Array {
-	var result *Array
+func getvariables(fn *Node) []*Node {
+	var result []*Node
}
diff {
-	arraysort((*Array)(cfg), blockrpocmp)
+	sort.Sort(blockrpocmp(cfg))
}
diff {
-func blockrpocmp(p1 interface{}, p2 interface{}) int {
-	var bb1 *BasicBlock
-	var bb2 *BasicBlock
-
-	bb1 = *p1.(**BasicBlock)
-	bb2 = *p2.(**BasicBlock)
-	if bb1.rpo < bb2.rpo {
-		return -1
-	}
-	if bb1.rpo > bb2.rpo {
-		return 1
-	}
-	return 0
-}
+type blockrpocmp []*BasicBlock
+func (x blockrpocmp) Len() int { return len(x) }
+func (x blockrpocmp) Swap(i, j int) { x[i], x[j] = x[j], x[i]}
+func (x blockrpocmp) Less(i, j int) bool { return x[i].rpo < x[j].rpo }
}

rename twobitwritesymbol.len n

diff {
-	main.Memset(remap, 0xff, n*sizeof(remap[0]))
+	for i := range remap {
+		remap[i] = -1
+	}
}

diff {
-	main.Memset(table, 0xff, tablesize*sizeof(table[0]))
+	for i := range table {
+		table[i] = -1
+	}
}

bool isfunny.return
func isfunny(n *Node) bool {
	return n.Sym != nil && (n.Sym.Name == ".fp" || n.Sym.Name == ".args")
}

rename freecfg.len n

diff {
- cfg = append(cfg, p.Link.Opt)
+ cfg = append(cfg, p.Link.Opt.(*BasicBlock))
}
diff {
- cfg = append(cfg, p.To.U.Branch.Opt)
+ cfg = append(cfg, p.To.U.Branch.Opt.(*BasicBlock))
}
diff {
- Fatal("bad bookkeeping in liveness %v %d", Nconv(to.Node, 0), pos)
+ Fatal("bad bookkeeping in liveness %v %d", Nconv(to.Node.(*Node), 0), pos)
}
diff {
- Fatal("bad bookkeeping in liveness %v %d", Nconv(from.Node, 0), pos)
+ Fatal("bad bookkeeping in liveness %v %d", Nconv(from.Node.(*Node), 0), pos)
}
